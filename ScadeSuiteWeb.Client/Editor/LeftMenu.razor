@using System.Diagnostics.CodeAnalysis
@using Newtonsoft.Json
@using ParseSuite
@using ScadeSuiteWeb.Client.Services
@using ScadeSuiteWeb.Shared.Utils
@using ScadeSuiteWeb.Shared.ViewModels.PorjectModel
@inject IDialogService _dialogService
@inject HttpClient Http
@inject IModelManager ModelManager


<FluentTabs @bind-ActiveTabId="@activeid" OnTabChange="HandleOnTabChange">
    <FluentTab Label="file view" Id="tab-1">
        @* ---------------------------- file view ----------------------------  *@
        <FluentTreeView
            @bind-CurrentSelected="currentSelected"
            OnExpandedChange="HandleOnExpandedChanged"
            OnSelectedChange ="HandleOnSelectedChanged">
            @if (Project != null)
            {
                <FluentTreeItem Id="myId4" Text="@Project.Name" Data="@root">
                    @foreach (var rootItem in Project.Project.Roots)
                    {
                        <TreeItem TItem="SdyElement" Item="rootItem" />
                    }
                </FluentTreeItem>
            }
        </FluentTreeView>
    </FluentTab>
    
    <FluentTab Label="model view" Id="tab-2">
        
        @* ---------------------------- model view ----------------------------  *@
        <FluentTreeView
            @bind-CurrentSelected="currentSelectedModelView"
            OnExpandedChange="HandleOnExpandedChangedModelView"
            OnSelectedChange ="HandleOnSelectedChangedModelView">
            <FluentTreeItem Id="nodesEditor" Text="@(ModelManager.Project.Project + ".etp")">
                <FluentTreeItem Text="Interface">
                    @if (modelPj != null)
                    {
                        foreach (var node in modelPj.Nodes)
                        {
                            foreach (var inputNode in node.Inputs)
                            {
                                <FluentTreeItem Text="@inputNode.Name" Data="@inputNode">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowCircleLeft())" Color="@Color.Neutral" Slot="start"/>
                                </FluentTreeItem>
                            }

                            foreach (var outputNode in node.Outputs)
                            {
                                <FluentTreeItem Text="@outputNode.Name" Data="@outputNode">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowCircleRight())" Color="@Color.Neutral" Slot="start"/>
                                </FluentTreeItem>
                            }
                        }
                    }
                
                </FluentTreeItem>
            </FluentTreeItem>
                
        </FluentTreeView>
        
        
    </FluentTab>

</FluentTabs>

<p>Active tab changed to: @changedto?.Label</p>

@*
<button @onclick="SwitchToFileView">file view</button> 
<button @onclick="SwitchToModelView">model view</button>
*@

<p>Current selected tree item is @currentSelected?.Text</p>
<p>Most recently expanded/collapsed tree item is @currentAffected?.Text</p>

<FluentMenu Anchor="myId4" Trigger="MouseButton.Right" Anchored="false" @onmenuchange=OnMenuChange>
    <FluentMenuItem Label="New Folder" OnClick="@CreateNewFolder" />
    <FluentMenuItem  Label="New File" OnClick="@CreateNewFile" >
    </FluentMenuItem > 
</FluentMenu>

<FluentMenu Anchor="nodesEditor" Trigger="MouseButton.Right" Anchored="false" @onmenuchange=OnModelViewMenuChange >
    <FluentMenuItem Label="Add Node">
        <MenuItems>
            <FluentMenuItem Label="Add Input Node" OnClick="@AddInputNode"/>
            <FluentMenuItem Label="Add Output Node" OnClick="@AddOutputNode"/>
        </MenuItems>
    </FluentMenuItem>
    <FluentMenuItem Label="Delete Node" OnClick="@DeleteNode"/>
</FluentMenu>


<p>@status</p>

<hr>

@code
{
    [Parameter]
    public double NewSize { get; set; }

    [Parameter]
    public SdyProject? Project { get; set; }
    
    [Parameter]
    public EventCallback<SdyElement> OnElementSelected { get; set; }
    
    [Parameter]
    public EventCallback<SSInput> OnInputSelected { get; set; }
    
    [Parameter]
    public EventCallback<SSOutput> OnOutputSelected { get; set; }
    
    public SdyFolder? root = new SdyFolder() { Name = "Root"};
    
    bool FlowersExpanded = true;
    bool PlanesExpanded = true;
    bool DaisySelected = false;
    bool SunflowerSelected = true;
    bool RoseSelected = false;


    FluentTreeItem? currentSelected;
    FluentTreeItem? currentSelectedModelView;
    FluentTreeItem? currentAffected;
    FluentTreeItem? currentAffectedModelView;

    private void SelectElement(SdyElement element)
    {
        OnElementSelected.InvokeAsync(element);
    }
    
    private void SelectInput(SSInput input)
    {
        OnInputSelected.InvokeAsync(input);
    }

    private void SelectOutput(SSOutput output)
    {
         OnOutputSelected.InvokeAsync(output);
    }
    
    
    private async Task<bool> ValidateCreation()
    {
        if (String.IsNullOrEmpty(currentSelected?.Text))
        {
            var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
                                                                          <h1> Please select a FOLDER to create a new folder or file </h1>
                                                                      </div>
            , new DialogParameters
            {
                Title = "Creating a New Folder",
            });
            return false;
        }
        
        if (SelectedElement?.GetType().Name == "SdyFileRef" )
        {
            var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
                                                                          <h1> Please select a FOLDER to create a new folder or file </h1>
                                                                      </div>
            , new DialogParameters
            {
                Title = "Creating a New Folder",
            });
            return false;
        }
        return true;
        
    }

    private void HandleOnExpandedChanged(FluentTreeItem item)
    {
        currentAffected = item;
        if (currentAffected.Expanded)
        {
            // var a = currentAffected.ChildContent;
        }
    }
    
    private void HandleOnExpandedChangedModelView(FluentTreeItem item)
    {
        currentAffectedModelView = item;
        if (currentAffectedModelView.Expanded)
        {
            // var a = currentAffected.ChildContent;
        }
    }
    
    // ------------------------------------------------------
    private string status = "";

    private void OnMenuChange(MenuChangeEventArgs args)
    {
        Console.WriteLine(currentSelected?.Data);
        Console.WriteLine(currentSelected?.Data);
        Console.WriteLine(currentSelected?.Data);


        if (args.Value is not null)
        {

            switch (args.Value)
            {
                case "New Folder":
                    // TODO: create a new folder
                    break;
                    
                case "New File":
                    // TODO: create a new file
                    break;
                    
                default:
                    break;
            }
            
        }
    }

    private void OnModelViewMenuChange(MenuChangeEventArgs args)
    {
        
    }

    public SSOutput? SelectedOutput { get;set; }
    private void HandleOnSelectedChanged(FluentTreeItem item)
    {
        SelectedElement = item.Data as SdyElement;
        // pass selected element to parent component
        if (SelectedElement != null) SelectElement(SelectedElement);
    }
    
    
    public SdyElement? SelectedElement { get;set; }
    public SSInput? SelectedInput { get;set; }
    private void HandleOnSelectedChangedModelView(FluentTreeItem item)
    {
        if (item.Data is SSInput)
        {
            SelectedInput = item.Data as SSInput;
            if (SelectedInput != null) SelectInput(SelectedInput);
        }
        if (item.Data is SSOutput)
        {
            SelectedOutput = item.Data as SSOutput;

            if (SelectedOutput != null) SelectOutput(SelectedOutput);
        }
        
    }
    
    private static IQueryable<ProjectsSimpleInfoVM>? projectsSimpleInfoVms { get; set; }
    private IEnumerable <ProjectsSimpleInfoVM>? ProjectSimpleInfoData { get; set; }
    
    private async Task CreateNewFolder(MouseEventArgs e)
    {
        if (!await ValidateCreation()) return;
        
        Console.WriteLine($"{e}New Folder");
        var folderName = string.Empty;
        var folerExtension = string.Empty;
        var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
                                                                      <FluentTextField @bind-Value=folderName  Label="Folder Name:" />
                                                                      <FluentTextField @bind-Value=folerExtension  Label="Folder Extension:" />
                                                                  </div>
            , new DialogParameters
            {
                Title = "Creating a New Folder",
            });

        var result = await dialogInstance.Result;
        if (!result.Cancelled)
        {
            var res = await Http.GetFromJsonAsync<ResponResult<IEnumerable<ProjectsSimpleInfoVM>>>("https://localhost:7061/api/ModelFolder/GetModelFolderInfo");

            if (res != null)
            {
                if (res.Success)
                {
                    if (res.Data != null) ProjectSimpleInfoData = res.Data;
                }
            }
            
            var newFolder = new CreateFolderVm();
            if (ProjectSimpleInfoData != null)
            {
                foreach (var item in ProjectSimpleInfoData)
                {
                    if (Project != null && item.Name == Project.Name)
                    {
                        newFolder.ProjectId = item.Id;
                        newFolder.FolderName = folderName;
                        newFolder.FolderExtension = folerExtension;
                        newFolder.SelectedElement = SelectedElement;
                    }
                }
            }
           var httpResponse = await Http.PostAsJsonAsync($"https://localhost:7061/api/ModelFolder/CreateNewFolder", newFolder);

           if (httpResponse.IsSuccessStatusCode)
           {
               if (SelectedElement != null)
               {
                   var folder = (SdyFolder)SelectedElement;
                   folder.Elements.Add(new SdyFolder() { Name = folderName, Extensions = folerExtension });
                   
                    if (Project != null && SelectedElement.Name == "Root")
                   {
                       Project.Project.Roots.Add(new SdyFolder() { Name = folderName, Extensions = folerExtension });
                   }
               }
           }
        }
    }
    
        FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
        int ProgressPercent = 0;
        List<string> fileNames = new List<string>();
        
        private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
        {
            Files = files.ToArray();
            // For the demo, delete these files.
            foreach (var file in Files)
            {
                fileNames.Add(file.Name);
            }
            
            // Wait 3 seconds before to reset the progress bar.
            await Task.Delay(3000);
            ProgressPercent = 0;
        }
    
    
    private async Task CreateNewFile(MouseEventArgs e)
    {
        if (!await ValidateCreation()) return;
        Console.WriteLine($"{e}New File");
        var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
                                                                      <FluentInputFile Id="my-file-uploader"
                                                                                       Multiple="true"
                                                                                       MaximumFileCount="4"
                                                                                       MaximumFileSize="@(10*1024*1024)"
                                                                                       @bind-ProgressPercent="@ProgressPercent"
                                                                                       OnCompleted="@OnCompletedAsync"
                                                                                       Style="height: 300px; border: 1px dashed red;">
                                                                          <ChildContent>
                                                                              <label for="my-file-uploader">
                                                                                  <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
                                                                              </label>
                                                                              <div>
                                                                                  Drag files here you wish to upload,
                                                                                  or <label for="my-file-uploader">browse</label>
                                                                                  for them<span style="color: red;">*</span>.
                                                                                  <br />
                                                                                  <em>Maximum of 4 files allowed.</em>
                                                                              </div>
                                                                          </ChildContent>
                                                                      </FluentInputFile>
                                                                      @if (Files.Any())
                                                                      {
                                                                          <h4>File(s) uploaded:</h4>
                                                                          <ul>
                                                                              @foreach (var file in Files)
                                                                              {
                                                                                  <li>
                                                                                      <b>@file.Name</b> 🔹
                                                                                      @($"{Decimal.Divide(file.Size, 1024):N} KB") 🔹
                                                                                      @file.ContentType 🔹
                                                                                      @file.LocalFile?.FullName
                                                                                      @file.ErrorMessage
                                                                                  </li>
                                                                              }
                                                                          </ul>
                                                                      }
                                                                  </div>
            , new DialogParameters
            {
                Title = "Creating a New File",
            });

        var result = await dialogInstance.Result;
        if (!result.Cancelled)
        {
            CreateFileVm newFile = new CreateFileVm();
            
            var res = await Http.GetFromJsonAsync<ResponResult<IEnumerable<ProjectsSimpleInfoVM>>>("https://localhost:7061/api/ModelFolder/GetModelFolderInfo");

            if (res != null)
            {
                if (res.Success)
                {
                    if (res.Data != null) ProjectSimpleInfoData = res.Data;
                }
            }
            if (ProjectSimpleInfoData != null)
            {
                foreach (var item in ProjectSimpleInfoData)
                {
                    if (Project != null && item.Name == Project.Name)
                    {
                        newFile .ProjectId = item.Id;
                        newFile.FileNames = fileNames;
                        newFile.SelectedElement = SelectedElement;
                    }
                }
            }
            
            if (fileNames.Count > 0)
            {
                var httpResponse = await Http.PostAsJsonAsync($"https://localhost:7061/api/ModelFolder/CreateNewFile",newFile);

                if (httpResponse.IsSuccessStatusCode)
                {
                    if (SelectedElement != null)
                    {
                        var folder = (SdyFolder)SelectedElement;
                        foreach (var filename in fileNames)
                        {
                            folder.Elements.Add(new SdyFileRef() { PersistAs = filename });
                        }
                    }
                }
                
            }
            
            // await _dialogService.ShowSuccessAsync($"You entered:3748 ", "Success");
        }
    }

    
    #region tabs
    // ------------------------- tabs
    public string Tab { get; set; } = "file";

    private void SwitchToFileView()
    {
        Tab = "file";
    }
    private void SwitchToModelView()
    {
        Tab = "model";
    }
    
    string? activeid = "tab-1";
    
    FluentTab? changedto;

    public SSModel? modelPj { get; set; }
    public List<SSNode> Nodes { get; set; }
    
    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
        if (tab.Id == "tab-2")
        {
            modelPj = ModelManager.NewProject();
            
            /*
            Nodes = modelPj.Nodes;
            var json = JsonConvert.SerializeObject(Nodes );
            Console.WriteLine(json);
            */
        }
    }
    
    
    
    
    #endregion
    
    
    #region node editor
    
    
    private async Task AddInputNode (MouseEventArgs e)
    {
        // if (!await ValidateCreation()) return;


        string inputName = string.Empty;
        string inputType = string.Empty;
        if (currentSelectedModelView != null)
        {
            var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
                                                                          <FluentTextField @bind-Value=inputName   Label="Input Name:" />
                                                                          <FluentTextField @bind-Value=inputType   Label="Input Type:" />
                                                                      </div>
                , new DialogParameters
                {
                    Title = "Creating a New Input",
                });

            var result = await dialogInstance.Result;
            if (!result.Cancelled)
            {
                SSInput input = new()
                {
                    Name = inputName,
                    DataType = inputType,
                    Comment = "",
                    RequirementID = new()
                };
                if (modelPj != null)
                    foreach (var item in modelPj.Nodes)
                    {
                        item.Inputs.Add(input);
                    }
            }
        }

    }
    
    private async Task AddOutputNode(MouseEventArgs e)
    {
        // if (!await ValidateCreation()) return;

        // currentSelectedModelView.Data;
        
        string outputName = string.Empty;
        string outputType = string.Empty;
        if (currentSelectedModelView != null)
        {
            var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
                                                                          <FluentTextField @bind-Value=outputName    Label="Output Name:" />
                                                                          <FluentTextField @bind-Value=outputType     Label="Output Type:" />
                                                                      </div>
                , new DialogParameters
                {
                    Title = "Creating a New Output",
                }); 
            var result = await dialogInstance.Result;
            if (!result.Cancelled)
            {
                SSInput input = new()
                {
                    Name = outputName,
                    DataType = outputType,
                    Comment = "",
                    RequirementID = new()
                };
                if (modelPj != null)
                    foreach (var item in modelPj.Nodes)
                    {
                        item.Inputs.Add(input);
                    }
            }
        }
        
    }
    
    private void DeleteNode(MouseEventArgs e)
    {
        // if (!await ValidateCreation()) return;
        if (currentSelectedModelView != null)
        {
            var nodeName = currentSelectedModelView.Text;

            if (modelPj != null)
            {
                var inputsToRemove = new List<SSInput>();
                var outputsToRemove = new List<SSOutput>();

                foreach (var item in modelPj.Nodes)
                {
                    foreach (var input in item.Inputs)
                    {
                        if (input.Name == nodeName)
                        {
                            inputsToRemove.Add(input);
                        }
                    }

                    foreach (var output in item.Outputs)
                    {
                        if (output.Name == nodeName)
                        {
                            outputsToRemove.Add(output);
                        }
                    }
                }

                // Remove the inputs and outputs after iteration
                foreach (var item in modelPj.Nodes)
                {
                    foreach (var input in inputsToRemove)
                    {
                        item.Inputs.Remove(input);
                    }

                    foreach (var output in outputsToRemove)
                    {
                        item.Outputs.Remove(output);
                    }
                }
            }
        }

    }
    
    #endregion
    
}
