@using ScadeSuiteWeb.Shared.ViewModels.PorjectModel
@using ScadeSuiteWeb.Shared.Utils
@implements IDialogContentComponent<ProjectsSimpleInfoVM>
@inject HttpClient Http
@inject IToastService ToastService

<FluentMessageBarProvider  MaxMessageCount="1" />

<FluentDataGrid Items="@projectsSimpleInfoVms" ShowHover="true" TGridItem="ProjectsSimpleInfoVM">
    <SelectColumn TGridItem="ProjectsSimpleInfoVM"
                  SelectMode="DataGridSelectMode.Single"
                  Property="@(e => e.Selected)"
                  OnSelect="@(e => e.Item.Selected = e.Selected)"
                  />
    <PropertyColumn Width="100px" Property="@(p => p.Id)" Title="ID"  Sortable="true"/>
    <PropertyColumn Width="100px" Property="@(p => p.Name)"  Sortable="true"/>
    <PropertyColumn Width="250px" Property="@(p => p.CreatedTime)" Format="yyyy-MM-dd HH:mm:ss" Sortable="true" />
</FluentDataGrid>

  <div>
      <b>ProjectFilePath</b>
      <br>
      @if (projectsSimpleInfoVms is not null)
      {
        @String.Join("; ", projectsSimpleInfoVms.Where(p => p.Selected).Select(p => p.ProjectFilePath))
      }
  </div>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Open This Project</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    
    [Parameter]
    public ProjectsSimpleInfoVM? Content { get; set; }
    
    
    [CascadingParameter] public FluentDialog? Dialog { get; set; }
    private IEnumerable <ProjectsSimpleInfoVM>? ProjectSimpleInfoData { get; set; }
    private static IQueryable<ProjectsSimpleInfoVM>? projectsSimpleInfoVms { get; set; }

    protected override async Task<Task> OnParametersSetAsync()
    {
        var res = await Http.GetFromJsonAsync<ResponResult<IEnumerable<ProjectsSimpleInfoVM>>>("https://localhost:7061/api/ModelFolder/GetModelFolderInfo");
        if (res != null)
        {
            if (res.Success)
            {
                if (res.Data != null) ProjectSimpleInfoData = res.Data;
                if (ProjectSimpleInfoData  == null)
                {
                    return Task.CompletedTask;
                }
                StateHasChanged();
            }
            else
            {
             ToastService.ShowError($"{res.Message}");
            }
        }
        else
        {
             ToastService.ShowError("网络错误");
        }

        if (ProjectSimpleInfoData != null)
        {
            projectsSimpleInfoVms = ProjectSimpleInfoData.AsQueryable();
        }
        return base.OnParametersSetAsync();
    }

    private async Task SaveAsync()
    {
        if (projectsSimpleInfoVms != null) Content = projectsSimpleInfoVms.FirstOrDefault(p => p.Selected);
        if (Dialog!= null)
            await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
    
    /*
    private void ResetSelectItems()
    {
        People.ToList().ForEach(i => i.Selected = false);
        People.First().Selected = true;
        SelectedItems = People.Where(p => p.Selected);
    }
    
*/
}
